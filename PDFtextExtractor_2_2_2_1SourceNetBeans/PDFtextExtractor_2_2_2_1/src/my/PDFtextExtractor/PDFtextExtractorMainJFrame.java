
package my.PDFtextExtractor;

/**
 *
 * Developed by Vladimir Yesipov
 */
/*Third party Copyright "File Chooser"
 * Copyright disclamer for File Chooser library:
 *
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.awt.Component;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.Query.gt;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class PDFtextExtractorMainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form PDFtextExtractorMainJFrame
     */
    //New default global list model declaration
    DefaultListModel<String> model;
    
    
    /**
     *This is global list of files declaration
     */
    public File [] choosen_pdf_files;    
    
    //Classes declaration
    PDFtoTXT selected_txt = new PDFtoTXT();
    PDFfiles model_files = new PDFfiles();
    
    public PDFtextExtractorMainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lst_PDFfiles = new javax.swing.JList<>();
        btn_clearPDFsel = new javax.swing.JButton();
        btn_selectPDF = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_PDFfile = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_finishFrag = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_startFrag = new javax.swing.JTextArea();
        btn_extractSave = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();
        btn_help = new javax.swing.JButton();
        btn_clearFrags = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PDF File(s) Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File(s) already selected:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lst_PDFfiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lst_PDFfiles.setValueIsAdjusting(true);
        lst_PDFfiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_PDFfilesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lst_PDFfiles);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        );

        btn_clearPDFsel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_clearPDFsel.setText("Clear File(s) Selection");
        btn_clearPDFsel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearPDFselActionPerformed(evt);
            }
        });

        btn_selectPDF.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_selectPDF.setText("Select PDF File(s)");
        btn_selectPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_clearPDFsel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_selectPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btn_selectPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_clearPDFsel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PDF File Text", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        txt_PDFfile.setEditable(false);
        txt_PDFfile.setColumns(20);
        txt_PDFfile.setRows(5);
        jScrollPane1.setViewportView(txt_PDFfile);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fragment finishing point", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        txt_finishFrag.setColumns(20);
        txt_finishFrag.setRows(5);
        jScrollPane3.setViewportView(txt_finishFrag);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fragment starting point", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        txt_startFrag.setColumns(20);
        txt_startFrag.setRows(5);
        jScrollPane2.setViewportView(txt_startFrag);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btn_extractSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_extractSave.setText("Extract/Save");
        btn_extractSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_extractSaveActionPerformed(evt);
            }
        });

        btn_exit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_exit.setText("Exit");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_help.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_help.setText("Help");
        btn_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_helpActionPerformed(evt);
            }
        });

        btn_clearFrags.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_clearFrags.setText("Clear fragment points");
        btn_clearFrags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearFragsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_extractSave, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_clearFrags)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_help, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_exit, btn_extractSave, btn_help});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_extractSave, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_help, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_clearFrags, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_clearFrags, btn_exit, btn_extractSave, btn_help});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        // """Exit""" Button Press Event Handler:
        System.exit(0);
    }//GEN-LAST:event_btn_exitActionPerformed

    private void btn_selectPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectPDFActionPerformed
        // """Select PDF File(s)""" add your handling code here:
        //---FileChooser call and ajastment to accept pdf files only
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter pdf_filter = new FileNameExtensionFilter("PDF files", "pdf");
        
        chooser.setDialogTitle("Select PDF File(s)");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.setFileFilter(pdf_filter);
        chooser.setMultiSelectionEnabled(true);        
        Component frame = null;
        
        //Text area clear command
        txt_PDFfile.setText("");

        //---chooser open button action        
        if (chooser.showDialog(frame, "Open")== JFileChooser.APPROVE_OPTION){
            File [] choosen_pdf_files = chooser.getSelectedFiles();
            
            //System.out.println(pdf_files);
            
            //----JList elements assignment
            model = new DefaultListModel<>();
            //PDFfiles model_files = new PDFfiles();
            String[] names = model_files.getPDFnames(choosen_pdf_files);
            for(String f : names){
                 model.addElement(f);
            }    
            lst_PDFfiles.setModel(model);
        }
    }//GEN-LAST:event_btn_selectPDFActionPerformed

    private void btn_clearFragsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearFragsActionPerformed
        // """Clear""" Button Press Event Handler:
        txt_startFrag.setText("");
        txt_finishFrag.setText("");
    }//GEN-LAST:event_btn_clearFragsActionPerformed

    private void btn_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_helpActionPerformed
        //"""Help""" Button Press Event Handler:
       String helpMessage = "“Select PDF File(s)” button brings a window to select PDF file(s) for text extraction.\n"+
        "“PDF File(s) selection” panel also has “Clear File(s) selection” button which clears out selection list and a list of selected PDF files.\n"+
        "“PDF File Text panel“ has a text area which displays text extracted from PDF file selected in the “File(s) already selected:” list of the PDF files.\n" +
        "“Fragment starting point” text area to type a starting point of the fragments to extract from all PDF files selection if it’s left empty start of the file will be used as a starting fragment point.\n"+
        "“Fragment finishing point” text area to type a finishing point of the fragments to extract from all PDF files selection if it’s left empty end of the file will be used as a finishing fragment point.\n" +
        "“Extract/Save” button brings a window to select or type a name of the result text file and initiates the text extraction process and saves it into the selected text file.\n" +
               "When you choose an existing file extracted text will be added to the end of this file. \n"+
        "“Clear Fragment Points” button clears text fields “Fragment starting point” and “Fragment finishing point”.\n" +
        "Button “Help” brings this window.\n" +
        "Button “Exit” quits the application.";
       JOptionPane.showMessageDialog(null, helpMessage, "PDF text extractor elements description.", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_btn_helpActionPerformed

    private void btn_clearPDFselActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearPDFselActionPerformed
        // """Clear File(s)""" Selection add your handling code here:
        lst_PDFfiles.clearSelection();
        txt_PDFfile.setText("");
        model = new DefaultListModel<>();
        lst_PDFfiles.setModel(model);        
        model_files.clearPDFselection();
    }//GEN-LAST:event_btn_clearPDFselActionPerformed

    private void lst_PDFfilesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_PDFfilesValueChanged
        //---List item (pdf file) selection handling code here:
        boolean adjust = evt.getValueIsAdjusting();
        //System.out.println(", Adjusting? " + adjust);
        if ((!adjust) && (!lst_PDFfiles.isSelectionEmpty())) {
            String selected_fname = lst_PDFfiles.getSelectedValue().toString();
            System.out.println(selected_fname);
            File[] pdf_files = model_files.getPDFfiles();
            for(File p : pdf_files){
                if (p.getName() == null ? selected_fname == null : p.getName().equals(selected_fname)){
                    try {
                        String selected_txt = PDFtoTXT.pdftoText(p);
                        txt_PDFfile.setText(selected_txt);
                        
                        break;
                    } catch (IOException ex) {
                        Logger.getLogger(PDFtextExtractorMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {                
                }
                System.out.println(p.getName());
            }
        }

    }//GEN-LAST:event_lst_PDFfilesValueChanged

    private void btn_extractSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_extractSaveActionPerformed
        // """Extract/Save" button press handling code here:
        if (lst_PDFfiles.getModel().getSize() == 0){
            JOptionPane.showMessageDialog(null, "Please, select pdf files you would like to work first.", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            //Selecting a text file to save extracted text fragments
            JFrame saveFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a text file to save");
            FileNameExtensionFilter txt_filter = new FileNameExtensionFilter("Text (.txt) files only", "txt");            
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter());
            fileChooser.setFileFilter(txt_filter);
            fileChooser.setMultiSelectionEnabled(false);

            int userSelection = fileChooser.showSaveDialog(saveFrame);
            //Filename approved
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                //Cutting the pdf files fragments
                String start_text = txt_startFrag.getText();//read contents of starting fragment text area into 'start_text'
                String finish_text = txt_finishFrag.getText();//read contents of finishing fragment text area into 'finish_text'
                /*String newline = System.getProperty("line.separator");
                boolean start_hasNewline = start_text.contains(newline);
                boolean finish_hasNewline = finish_text.contains(newline);*/

                String result_file="";
                File fileToSave;
                File[] sel_files = model_files.getPDFfiles();
                for (File s:sel_files){
                    String result_text="";
                    try {
                        String file_text = PDFtoTXT.pdftoText(s);

                        // Cut the beginning of the text
                        if ((start_text != null) && (start_text.trim().length() > 0 )  /*&& (!start_hasNewline)*/){
                            result_text = file_text.substring(file_text.indexOf(start_text), file_text.length());
                        }else{
                            result_text = "\n"+" Beginning of the file is a starting fragment point."+" \n" + file_text;
                        }

                        // Cut the excessive ending of the text:
                        if ((finish_text != null) && (finish_text.trim().length() > 0 )  /*&& (!finish_hasNewline)*/){
                            result_text = result_text.substring(0, result_text.indexOf(finish_text) + finish_text.length());
                        }else{
                            result_text = result_text + "\n End of the file is a finishing fragment point.\n";
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(PDFtextExtractorMainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    result_file = result_file + " \n" + s.getName() + " \n" + result_text;
                    System.out.println(result_file);
                }
                //Saving the text file
                try{
                    fileToSave = fileChooser.getSelectedFile();
                    String file_name = fileToSave.toString();

                    if (!fileToSave.exists()) {
                        fileToSave.createNewFile();
                    }
                    //Here true is to append the content to file
                    FileWriter fw = new FileWriter(fileToSave,true);
                    //BufferedWriter writer
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(result_file);
                    //Closing BufferedWriter Stream
                    bw.close();
                    if (!file_name.endsWith(".txt")){
                        file_name += ".txt";
                        File newName = new File(file_name);

                        if(fileToSave.renameTo(newName)){
                            System.out.println("File renamed");
                        }else{
                            System.out.println("Sorry! the file can't be renamed");
                        }
                    }
                    System.out.println("Data successfully appended at the end of file");
                    System.out.println("Save as file: " + fileToSave.getAbsolutePath());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btn_extractSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PDFtextExtractorMainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clearFrags;
    private javax.swing.JButton btn_clearPDFsel;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_extractSave;
    private javax.swing.JButton btn_help;
    private javax.swing.JButton btn_selectPDF;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> lst_PDFfiles;
    private javax.swing.JTextArea txt_PDFfile;
    private javax.swing.JTextArea txt_finishFrag;
    private javax.swing.JTextArea txt_startFrag;
    // End of variables declaration//GEN-END:variables
}
